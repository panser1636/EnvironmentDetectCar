<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\mm32f527x_e9p.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\mm32f527x_e9p.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6180002: Last Updated: Mon Jul 24 14:05:57 2023
<BR><P>
<H3>Maximum Stack Usage =       1448 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; mode_gps &rArr; Esp_PUB &rArr; ESP01S_SendCmd &rArr; uart_write_string &rArr; debug_assert_handler &rArr; debug_output &rArr; sprintf
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[0]">Reset_Handler</a>
 <LI><a href="#[2]">HardFault_Handler</a>
 <LI><a href="#[1d]">ADC1_2_IRQHandler</a>
 <LI><a href="#[d]">BKP_TAMPER_IRQHandler</a>
 <LI><a href="#[4]">BusFault_Handler</a>
 <LI><a href="#[43]">COMP_IRQHandler</a>
 <LI><a href="#[8]">DebugMon_Handler</a>
 <LI><a href="#[ef]">Default_Handler</a>
 <LI><a href="#[41]">ENET_IRQHandler</a>
 <LI><a href="#[42]">ENET_WKUP_IRQHandler</a>
 <LI><a href="#[f]">FLASH_IRQHandler</a>
 <LI><a href="#[1f]">FlexCAN1_IRQHandler</a>
 <LI><a href="#[44]">FlexCAN2_IRQHandler</a>
 <LI><a href="#[28]">I2C1_IRQHandler</a>
 <LI><a href="#[29]">I2C2_IRQHandler</a>
 <LI><a href="#[4c]">LPTIM_IRQHandler</a>
 <LI><a href="#[4d]">LPUART_IRQHandler</a>
 <LI><a href="#[3]">MemManage_Handler</a>
 <LI><a href="#[1]">NMI_Handler</a>
 <LI><a href="#[c]">PVD_IRQHandler</a>
 <LI><a href="#[9]">PendSV_Handler</a>
 <LI><a href="#[4b]">QSPI_IRQHandler</a>
 <LI><a href="#[10]">RCC_CRS_IRQHandler</a>
 <LI><a href="#[30]">RTC_ALR_IRQHandler</a>
 <LI><a href="#[e]">RTC_IRQHandler</a>
 <LI><a href="#[2a]">SPI1_IRQHandler</a>
 <LI><a href="#[2b]">SPI2_IRQHandler</a>
 <LI><a href="#[37]">SPI3_IRQHandler</a>
 <LI><a href="#[7]">SVC_Handler</a>
 <LI><a href="#[6]">SecureFault_Handler</a>
 <LI><a href="#[a]">SysTick_Handler</a>
 <LI><a href="#[21]">TIM1_BRK_IRQHandler</a>
 <LI><a href="#[24]">TIM1_CC_IRQHandler</a>
 <LI><a href="#[23]">TIM1_TRG_COM_IRQHandler</a>
 <LI><a href="#[32]">TIM8_BRK_IRQHandler</a>
 <LI><a href="#[35]">TIM8_CC_IRQHandler</a>
 <LI><a href="#[34]">TIM8_TRG_COM_IRQHandler</a>
 <LI><a href="#[45]">USB_FS_IRQHandler</a>
 <LI><a href="#[31]">USB_WKUP_IRQHandler</a>
 <LI><a href="#[5]">UsageFault_Handler</a>
 <LI><a href="#[b]">WWDG_IWDG_IRQHandler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[1d]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[80]">gpio_init</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[96]">debug_assert_handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1d]">ADC1_2_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[d]">BKP_TAMPER_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[43]">COMP_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[16]">DMA1_CH1_IRQHandler</a> from isr.o(.text.DMA1_CH1_IRQHandler) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[17]">DMA1_CH2_IRQHandler</a> from isr.o(.text.DMA1_CH2_IRQHandler) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[18]">DMA1_CH3_IRQHandler</a> from isr.o(.text.DMA1_CH3_IRQHandler) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[19]">DMA1_CH4_IRQHandler</a> from isr.o(.text.DMA1_CH4_IRQHandler) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[1a]">DMA1_CH5_IRQHandler</a> from isr.o(.text.DMA1_CH5_IRQHandler) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[1b]">DMA1_CH6_IRQHandler</a> from isr.o(.text.DMA1_CH6_IRQHandler) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[1c]">DMA1_CH7_IRQHandler</a> from isr.o(.text.DMA1_CH7_IRQHandler) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[1e]">DMA1_CH8_IRQHandler</a> from isr.o(.text.DMA1_CH8_IRQHandler) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[3c]">DMA2_CH1_IRQHandler</a> from isr.o(.text.DMA2_CH1_IRQHandler) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[3d]">DMA2_CH2_IRQHandler</a> from isr.o(.text.DMA2_CH2_IRQHandler) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[3e]">DMA2_CH3_IRQHandler</a> from isr.o(.text.DMA2_CH3_IRQHandler) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[3f]">DMA2_CH4_IRQHandler</a> from isr.o(.text.DMA2_CH4_IRQHandler) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[40]">DMA2_CH5_IRQHandler</a> from isr.o(.text.DMA2_CH5_IRQHandler) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[46]">DMA2_CH6_IRQHandler</a> from isr.o(.text.DMA2_CH6_IRQHandler) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[47]">DMA2_CH7_IRQHandler</a> from isr.o(.text.DMA2_CH7_IRQHandler) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[48]">DMA2_CH8_IRQHandler</a> from isr.o(.text.DMA2_CH8_IRQHandler) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[8]">DebugMon_Handler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[41]">ENET_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[42]">ENET_WKUP_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[11]">EXTI0_IRQHandler</a> from isr.o(.text.EXTI0_IRQHandler) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[2f]">EXTI15_10_IRQHandler</a> from isr.o(.text.EXTI15_10_IRQHandler) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[12]">EXTI1_IRQHandler</a> from isr.o(.text.EXTI1_IRQHandler) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[13]">EXTI2_IRQHandler</a> from isr.o(.text.EXTI2_IRQHandler) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[14]">EXTI3_IRQHandler</a> from isr.o(.text.EXTI3_IRQHandler) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[15]">EXTI4_IRQHandler</a> from isr.o(.text.EXTI4_IRQHandler) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[20]">EXTI9_5_IRQHandler</a> from isr.o(.text.EXTI9_5_IRQHandler) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[f]">FLASH_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[1f]">FlexCAN1_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[44]">FlexCAN2_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[28]">I2C1_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[29]">I2C2_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[4c]">LPTIM_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[4d]">LPUART_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[c]">PVD_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[4b]">QSPI_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[10]">RCC_CRS_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[30]">RTC_ALR_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[e]">RTC_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[2a]">SPI1_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[2b]">SPI2_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[37]">SPI3_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[7]">SVC_Handler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[6]">SecureFault_Handler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[21]">TIM1_BRK_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[24]">TIM1_CC_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[23]">TIM1_TRG_COM_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[22]">TIM1_UP_IRQHandler</a> from isr.o(.text.TIM1_UP_IRQHandler) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[25]">TIM2_IRQHandler</a> from isr.o(.text.TIM2_IRQHandler) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[26]">TIM3_IRQHandler</a> from isr.o(.text.TIM3_IRQHandler) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[27]">TIM4_IRQHandler</a> from isr.o(.text.TIM4_IRQHandler) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[36]">TIM5_IRQHandler</a> from isr.o(.text.TIM5_IRQHandler) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[3a]">TIM6_IRQHandler</a> from isr.o(.text.TIM6_IRQHandler) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[3b]">TIM7_IRQHandler</a> from isr.o(.text.TIM7_IRQHandler) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[32]">TIM8_BRK_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[35]">TIM8_CC_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[34]">TIM8_TRG_COM_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[33]">TIM8_UP_IRQHandler</a> from isr.o(.text.TIM8_UP_IRQHandler) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[2c]">UART1_IRQHandler</a> from isr.o(.text.UART1_IRQHandler) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[2d]">UART2_IRQHandler</a> from isr.o(.text.UART2_IRQHandler) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[2e]">UART3_IRQHandler</a> from isr.o(.text.UART3_IRQHandler) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[38]">UART4_IRQHandler</a> from isr.o(.text.UART4_IRQHandler) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[39]">UART5_IRQHandler</a> from isr.o(.text.UART5_IRQHandler) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[49]">UART6_IRQHandler</a> from isr.o(.text.UART6_IRQHandler) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[4a]">UART7_IRQHandler</a> from isr.o(.text.UART7_IRQHandler) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[45]">USB_FS_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[31]">USB_WKUP_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[b]">WWDG_IWDG_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[51]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[4f]">debug_uart_str_output</a> from zf_common_debug.o(.text.debug_uart_str_output) referenced 2 times from zf_common_debug.o(.text.debug_init)
 <LI><a href="#[50]">fputc</a> from zf_common_debug.o(.text.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[4e]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[52]">type_default_callback</a> from zf_device_type.o(.text.type_default_callback) referenced from zf_device_type.o(.data.camera_dma_handler)
 <LI><a href="#[52]">type_default_callback</a> from zf_device_type.o(.text.type_default_callback) referenced from zf_device_type.o(.data.camera_vsync_handler)
 <LI><a href="#[52]">type_default_callback</a> from zf_device_type.o(.text.type_default_callback) referenced from zf_device_type.o(.data.wireless_module_uart_handler)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[53]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[e9]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry4.o(.ARM.Collect$$$$00000003))

<P><STRONG><a name="[54]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[6a]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[ea]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[eb]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[ec]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[ed]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[ee]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = Reset_Handler &rArr; SystemInit &rArr; clock_init &rArr; clock_set_freq &rArr; func_get_greatest_common_divisor
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>BKP_TAMPER_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>COMP_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[ef]"></a>Default_Handler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text), UNUSED)

<P><STRONG><a name="[41]"></a>ENET_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>ENET_WKUP_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>FLASH_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>FlexCAN1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>FlexCAN2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>I2C1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>LPTIM_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>LPUART_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PVD_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>QSPI_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RCC_CRS_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>RTC_ALR_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>RTC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>SPI1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>SPI2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>SPI3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SecureFault_Handler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>USB_FS_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USB_WKUP_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>WWDG_IWDG_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[b0]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_read_buffer
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_write_buffer
</UL>

<P><STRONG><a name="[a7]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_write_buffer
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_protective_handler
</UL>

<P><STRONG><a name="[f0]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[58]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[f1]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[f2]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[57]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_clear
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_output
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Esp_PUB
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP01S_Clear
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP01S_Init
</UL>

<P><STRONG><a name="[f3]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[f4]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[59]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[ba]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_data_parse
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_int_number
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_float_number
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_double_number
</UL>

<P><STRONG><a name="[bd]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_data_parse
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_parameter_index
</UL>

<P><STRONG><a name="[a6]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_str_to_hex
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_output
</UL>

<P><STRONG><a name="[c5]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_uart_callback
</UL>

<P><STRONG><a name="[5a]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_str_to_double
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_gnrmc_parse
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>

<P><STRONG><a name="[5f]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_gnrmc_parse
</UL>

<P><STRONG><a name="[60]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[61]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_str_to_double
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm1xa_sound_callback
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_gnrmc_parse
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[62]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_str_to_double
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_gnrmc_parse
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[b5]"></a>__aeabi_dcmplt</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, dcmplt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_dcmplt
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_str_to_double
</UL>

<P><STRONG><a name="[63]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_str_to_double
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_gnrmc_parse
</UL>

<P><STRONG><a name="[64]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm1xa_sound_callback
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_gnrmc_parse
</UL>

<P><STRONG><a name="[ab]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm1xa_sound_callback
</UL>

<P><STRONG><a name="[66]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_float_number
</UL>

<P><STRONG><a name="[f5]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[e8]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[68]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[5b]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[f6]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[65]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[f7]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[5c]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[f8]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[f9]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[67]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[fa]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[5e]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[5d]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>

<P><STRONG><a name="[69]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[e5]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[55]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[fb]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>Beep_Short</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, firewarn.o(.text.Beep_Short))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Beep_Short &rArr; system_delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_delay_ms
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_level
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
</UL>

<P><STRONG><a name="[16]"></a>DMA1_CH1_IRQHandler</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, isr.o(.text.DMA1_CH1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DMA1_CH1_IRQHandler &rArr; DMA_ClearChannelInterruptStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearChannelInterruptStatus
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetChannelInterruptStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_CH2_IRQHandler</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, isr.o(.text.DMA1_CH2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DMA1_CH2_IRQHandler &rArr; DMA_ClearChannelInterruptStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearChannelInterruptStatus
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetChannelInterruptStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_CH3_IRQHandler</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, isr.o(.text.DMA1_CH3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DMA1_CH3_IRQHandler &rArr; DMA_ClearChannelInterruptStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearChannelInterruptStatus
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetChannelInterruptStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_CH4_IRQHandler</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, isr.o(.text.DMA1_CH4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DMA1_CH4_IRQHandler &rArr; DMA_ClearChannelInterruptStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearChannelInterruptStatus
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetChannelInterruptStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_CH5_IRQHandler</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, isr.o(.text.DMA1_CH5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DMA1_CH5_IRQHandler &rArr; DMA_ClearChannelInterruptStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearChannelInterruptStatus
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetChannelInterruptStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_CH6_IRQHandler</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, isr.o(.text.DMA1_CH6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DMA1_CH6_IRQHandler &rArr; DMA_ClearChannelInterruptStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearChannelInterruptStatus
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetChannelInterruptStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_CH7_IRQHandler</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, isr.o(.text.DMA1_CH7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DMA1_CH7_IRQHandler &rArr; DMA_ClearChannelInterruptStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearChannelInterruptStatus
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetChannelInterruptStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_CH8_IRQHandler</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, isr.o(.text.DMA1_CH8_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DMA1_CH8_IRQHandler &rArr; DMA_ClearChannelInterruptStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearChannelInterruptStatus
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetChannelInterruptStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>DMA2_CH1_IRQHandler</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, isr.o(.text.DMA2_CH1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DMA2_CH1_IRQHandler &rArr; DMA_ClearChannelInterruptStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearChannelInterruptStatus
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetChannelInterruptStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>DMA2_CH2_IRQHandler</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, isr.o(.text.DMA2_CH2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DMA2_CH2_IRQHandler &rArr; DMA_ClearChannelInterruptStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearChannelInterruptStatus
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetChannelInterruptStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>DMA2_CH3_IRQHandler</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, isr.o(.text.DMA2_CH3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DMA2_CH3_IRQHandler &rArr; DMA_ClearChannelInterruptStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearChannelInterruptStatus
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetChannelInterruptStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>DMA2_CH4_IRQHandler</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, isr.o(.text.DMA2_CH4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DMA2_CH4_IRQHandler &rArr; DMA_ClearChannelInterruptStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearChannelInterruptStatus
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetChannelInterruptStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>DMA2_CH5_IRQHandler</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, isr.o(.text.DMA2_CH5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DMA2_CH5_IRQHandler &rArr; DMA_ClearChannelInterruptStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearChannelInterruptStatus
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetChannelInterruptStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_CH6_IRQHandler</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, isr.o(.text.DMA2_CH6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DMA2_CH6_IRQHandler &rArr; DMA_ClearChannelInterruptStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearChannelInterruptStatus
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetChannelInterruptStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DMA2_CH7_IRQHandler</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, isr.o(.text.DMA2_CH7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DMA2_CH7_IRQHandler &rArr; DMA_ClearChannelInterruptStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearChannelInterruptStatus
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetChannelInterruptStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DMA2_CH8_IRQHandler</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, isr.o(.text.DMA2_CH8_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DMA2_CH8_IRQHandler &rArr; DMA_ClearChannelInterruptStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearChannelInterruptStatus
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetChannelInterruptStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>DMA_ClearChannelInterruptStatus</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, hal_dma.o(.text.DMA_ClearChannelInterruptStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_ClearChannelInterruptStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_CH8_IRQHandler
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_CH7_IRQHandler
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_CH6_IRQHandler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_CH5_IRQHandler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_CH4_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_CH3_IRQHandler
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_CH2_IRQHandler
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_CH1_IRQHandler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_CH8_IRQHandler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_CH7_IRQHandler
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_CH6_IRQHandler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_CH5_IRQHandler
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_CH4_IRQHandler
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_CH3_IRQHandler
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_CH2_IRQHandler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_CH1_IRQHandler
</UL>

<P><STRONG><a name="[6e]"></a>DMA_GetChannelInterruptStatus</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, hal_dma.o(.text.DMA_GetChannelInterruptStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_GetChannelInterruptStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_CH8_IRQHandler
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_CH7_IRQHandler
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_CH6_IRQHandler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_CH5_IRQHandler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_CH4_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_CH3_IRQHandler
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_CH2_IRQHandler
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_CH1_IRQHandler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_CH8_IRQHandler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_CH7_IRQHandler
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_CH6_IRQHandler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_CH5_IRQHandler
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_CH4_IRQHandler
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_CH3_IRQHandler
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_CH2_IRQHandler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_CH1_IRQHandler
</UL>

<P><STRONG><a name="[70]"></a>ESP01S_Clear</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, onenet.o(.text.ESP01S_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ESP01S_Clear
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP01S_Init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[71]"></a>ESP01S_Init</STRONG> (Thumb, 566 bytes, Stack size 536 bytes, onenet.o(.text.ESP01S_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1312<LI>Call Chain = ESP01S_Init &rArr; uart_init &rArr; afio_init &rArr; debug_assert_handler &rArr; debug_output &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP01S_SendCmd
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP01S_Clear
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_delay_ms
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[74]"></a>ESP01S_SendCmd</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, onenet.o(.text.ESP01S_SendCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = ESP01S_SendCmd &rArr; uart_write_string &rArr; debug_assert_handler &rArr; debug_output &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write_string
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Esp_PUB
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP01S_Init
</UL>

<P><STRONG><a name="[11]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isr.o(.text.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI0_IRQHandler &rArr; EXTI_ClearLineStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearLineStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 260 bytes, Stack size 8 bytes, isr.o(.text.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = EXTI15_10_IRQHandler &rArr; dm1xa_sound_callback &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_delay_ms
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_level
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm1xa_light_callback
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm1xa_sound_callback
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetLineStatus
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_Short
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearLineStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isr.o(.text.EXTI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI1_IRQHandler &rArr; EXTI_ClearLineStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearLineStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isr.o(.text.EXTI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI2_IRQHandler &rArr; EXTI_ClearLineStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearLineStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isr.o(.text.EXTI3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI3_IRQHandler &rArr; EXTI_ClearLineStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearLineStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, isr.o(.text.EXTI4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = EXTI4_IRQHandler &rArr; Beep_Short &rArr; system_delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_Short
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearLineStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 212 bytes, Stack size 8 bytes, isr.o(.text.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = EXTI9_5_IRQHandler &rArr; Beep_Short &rArr; system_delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetLineStatus
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_Short
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearLineStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>EXTI_ClearLineStatus</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hal_exti.o(.text.EXTI_ClearLineStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI_ClearLineStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[78]"></a>EXTI_GetLineStatus</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, hal_exti.o(.text.EXTI_GetLineStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = EXTI_GetLineStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[7b]"></a>Esp_PUB</STRONG> (Thumb, 184 bytes, Stack size 600 bytes, onenet.o(.text.Esp_PUB))
<BR><BR>[Stack]<UL><LI>Max Depth = 1328<LI>Call Chain = Esp_PUB &rArr; ESP01S_SendCmd &rArr; uart_write_string &rArr; debug_assert_handler &rArr; debug_output &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP01S_SendCmd
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_delay_ms
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_gps
</UL>

<P><STRONG><a name="[98]"></a>GPIO_Init</STRONG> (Thumb, 276 bytes, Stack size 24 bytes, hal_gpio.o(.text.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afio_init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>

<P><STRONG><a name="[99]"></a>GPIO_PinAFConf</STRONG> (Thumb, 192 bytes, Stack size 20 bytes, hal_gpio.o(.text.GPIO_PinAFConf))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinAFConf
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afio_init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>

<P><STRONG><a name="[d7]"></a>LPTIM_Init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, hal_lptim.o(.text.LPTIM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPTIM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_delay_init
</UL>

<P><STRONG><a name="[7c]"></a>OLED_Clear</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, oled.o(.text.OLED_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = OLED_Clear &rArr; OLED_SetCursor &rArr; OLED_WriteCommand &rArr; OLED_I2C_SendByte &rArr; gpio_set_level
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_SetCursor
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
</UL>

<P><STRONG><a name="[7f]"></a>OLED_I2C_Init</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, oled.o(.text.OLED_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = OLED_I2C_Init &rArr; gpio_init &rArr;  debug_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
</UL>

<P><STRONG><a name="[81]"></a>OLED_I2C_SendByte</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, oled.o(.text.OLED_I2C_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = OLED_I2C_SendByte &rArr; gpio_set_level
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_level
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WriteData
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WriteCommand
</UL>

<P><STRONG><a name="[82]"></a>OLED_I2C_Start</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, oled.o(.text.OLED_I2C_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = OLED_I2C_Start &rArr; gpio_set_level
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_level
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WriteData
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WriteCommand
</UL>

<P><STRONG><a name="[83]"></a>OLED_I2C_Stop</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, oled.o(.text.OLED_I2C_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OLED_I2C_Stop &rArr; gpio_set_level
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_level
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WriteData
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WriteCommand
</UL>

<P><STRONG><a name="[84]"></a>OLED_Init</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, oled.o(.text.OLED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = OLED_Init &rArr; OLED_I2C_Init &rArr; gpio_init &rArr;  debug_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WriteCommand
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_I2C_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[7d]"></a>OLED_SetCursor</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, oled.o(.text.OLED_SetCursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = OLED_SetCursor &rArr; OLED_WriteCommand &rArr; OLED_I2C_SendByte &rArr; gpio_set_level
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
</UL>

<P><STRONG><a name="[85]"></a>OLED_WriteCommand</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, oled.o(.text.OLED_WriteCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = OLED_WriteCommand &rArr; OLED_I2C_SendByte &rArr; gpio_set_level
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_I2C_SendByte
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_I2C_Stop
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_I2C_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_SetCursor
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
</UL>

<P><STRONG><a name="[7e]"></a>OLED_WriteData</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, oled.o(.text.OLED_WriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = OLED_WriteData &rArr; OLED_I2C_SendByte &rArr; gpio_set_level
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_I2C_SendByte
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_I2C_Stop
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_I2C_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
</UL>

<P><STRONG><a name="[86]"></a>PWM_Init</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, servo.o(.text.PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = PWM_Init &rArr; pwm_init &rArr; afio_init &rArr; debug_assert_handler &rArr; debug_output &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[97]"></a>RCC_EnableAHB1Periphs</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, hal_rcc.o(.text.RCC_EnableAHB1Periphs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_EnableAHB1Periphs
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afio_init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>

<P><STRONG><a name="[d9]"></a>RCC_EnableAPB1Periphs</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, hal_rcc.o(.text.RCC_EnableAPB1Periphs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_EnableAPB1Periphs
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_clock_enable
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[d5]"></a>RCC_EnableAPB2Periphs</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, hal_rcc.o(.text.RCC_EnableAPB2Periphs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_EnableAPB2Periphs
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_clock_enable
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_delay_init
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[d6]"></a>RCC_ResetAPB2Periphs</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, hal_rcc.o(.text.RCC_ResetAPB2Periphs))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RCC_ResetAPB2Periphs
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_delay_init
</UL>

<P><STRONG><a name="[88]"></a>Recv</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lm386.o(.text.Recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Recv &rArr; uart_read_byte &rArr; UART_GetData
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_read_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
</UL>

<P><STRONG><a name="[56]"></a>SystemInit</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, system_mm32f5277e.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SystemInit &rArr; clock_init &rArr; clock_set_freq &rArr; func_get_greatest_common_divisor
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_init
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[22]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, isr.o(.text.TIM1_UP_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM1_UP_IRQHandler &rArr; TIM_ClearInterruptStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearInterruptStatus
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetInterruptStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM2_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, isr.o(.text.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM2_IRQHandler &rArr; TIM_ClearInterruptStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearInterruptStatus
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetInterruptStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM3_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, isr.o(.text.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM3_IRQHandler &rArr; TIM_ClearInterruptStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearInterruptStatus
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetInterruptStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM4_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, isr.o(.text.TIM4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM4_IRQHandler &rArr; TIM_ClearInterruptStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearInterruptStatus
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetInterruptStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM5_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, isr.o(.text.TIM5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM5_IRQHandler &rArr; TIM_ClearInterruptStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearInterruptStatus
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetInterruptStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM6_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, isr.o(.text.TIM6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM6_IRQHandler &rArr; TIM_ClearInterruptStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearInterruptStatus
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetInterruptStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM7_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, isr.o(.text.TIM7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM7_IRQHandler &rArr; TIM_ClearInterruptStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearInterruptStatus
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetInterruptStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, isr.o(.text.TIM8_UP_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM8_UP_IRQHandler &rArr; TIM_ClearInterruptStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearInterruptStatus
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetInterruptStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>TIM_ClearInterruptStatus</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hal_tim.o(.text.TIM_ClearInterruptStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_ClearInterruptStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_UP_IRQHandler
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_IRQHandler
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_IRQHandler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_IRQHandler
</UL>

<P><STRONG><a name="[d8]"></a>TIM_DoSwTrigger</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hal_tim.o(.text.TIM_DoSwTrigger))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_DoSwTrigger
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_clear
</UL>

<P><STRONG><a name="[d3]"></a>TIM_EnableCompOutput</STRONG> (Thumb, 164 bytes, Stack size 20 bytes, hal_tim.o(.text.TIM_EnableCompOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_EnableCompOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
</UL>

<P><STRONG><a name="[8d]"></a>TIM_EnableOutputCompare</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, hal_tim.o(.text.TIM_EnableOutputCompare))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TIM_EnableOutputCompare &rArr; _TIM_WriteChannelCtrlReg
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PutChannelValue
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_TIM_WriteChannelCtrlReg
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
</UL>

<P><STRONG><a name="[d2]"></a>TIM_EnableOutputCompareSwitch</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, hal_tim.o(.text.TIM_EnableOutputCompareSwitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_EnableOutputCompareSwitch
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
</UL>

<P><STRONG><a name="[da]"></a>TIM_GetCounterValue</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, hal_tim.o(.text.TIM_GetCounterValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TIM_GetCounterValue
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_get
</UL>

<P><STRONG><a name="[8b]"></a>TIM_GetInterruptStatus</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, hal_tim.o(.text.TIM_GetInterruptStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TIM_GetInterruptStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_UP_IRQHandler
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_IRQHandler
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_IRQHandler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_IRQHandler
</UL>

<P><STRONG><a name="[d1]"></a>TIM_Init</STRONG> (Thumb, 202 bytes, Stack size 20 bytes, hal_tim.o(.text.TIM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
</UL>

<P><STRONG><a name="[8f]"></a>TIM_PutChannelValue</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, hal_tim.o(.text.TIM_PutChannelValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_PutChannelValue
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_EnableOutputCompare
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_set_duty
</UL>

<P><STRONG><a name="[d4]"></a>TIM_Start</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, hal_tim.o(.text.TIM_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TIM_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
</UL>

<P><STRONG><a name="[2c]"></a>UART1_IRQHandler</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, isr.o(.text.UART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART1_IRQHandler &rArr; UART_ClearInterruptStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ClearInterruptStatus
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetInterruptStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>UART2_IRQHandler</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, isr.o(.text.UART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART2_IRQHandler &rArr; UART_ClearInterruptStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ClearInterruptStatus
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetInterruptStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>UART3_IRQHandler</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, isr.o(.text.UART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART3_IRQHandler &rArr; UART_ClearInterruptStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ClearInterruptStatus
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetInterruptStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>UART4_IRQHandler</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, isr.o(.text.UART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = UART4_IRQHandler &rArr; gps_uart_callback &rArr; fifo_read_buffer &rArr; fifo_used &rArr; debug_assert_handler &rArr; debug_output &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_uart_callback
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ClearInterruptStatus
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetInterruptStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>UART5_IRQHandler</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, isr.o(.text.UART5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = UART5_IRQHandler &rArr; Recv &rArr; uart_read_byte &rArr; UART_GetData
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ClearInterruptStatus
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetInterruptStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>UART6_IRQHandler</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, isr.o(.text.UART6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = UART6_IRQHandler &rArr; uart_write_string &rArr; debug_assert_handler &rArr; debug_output &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write_string
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write_byte
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_esp32_read
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ClearInterruptStatus
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetInterruptStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>UART7_IRQHandler</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, isr.o(.text.UART7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART7_IRQHandler &rArr; UART_ClearInterruptStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ClearInterruptStatus
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetInterruptStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>UART_ClearInterruptStatus</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hal_uart.o(.text.UART_ClearInterruptStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_ClearInterruptStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7_IRQHandler
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART6_IRQHandler
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
</UL>

<P><STRONG><a name="[dc]"></a>UART_Enable</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, hal_uart.o(.text.UART_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[df]"></a>UART_EnableInterrupts</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, hal_uart.o(.text.UART_EnableInterrupts))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UART_EnableInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_interrupt
</UL>

<P><STRONG><a name="[de]"></a>UART_GetData</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, hal_uart.o(.text.UART_GetData))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = UART_GetData
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_read_byte
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_query_byte
</UL>

<P><STRONG><a name="[90]"></a>UART_GetInterruptStatus</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, hal_uart.o(.text.UART_GetInterruptStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = UART_GetInterruptStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7_IRQHandler
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART6_IRQHandler
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
</UL>

<P><STRONG><a name="[dd]"></a>UART_GetStatus</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, hal_uart.o(.text.UART_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = UART_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_read_byte
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write_byte
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_query_byte
</UL>

<P><STRONG><a name="[db]"></a>UART_Init</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, hal_uart.o(.text.UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[e0]"></a>UART_PutData</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hal_uart.o(.text.UART_PutData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_PutData
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write_byte
</UL>

<P><STRONG><a name="[95]"></a>afio_init</STRONG> (Thumb, 326 bytes, Stack size 40 bytes, zf_driver_gpio.o(.text.afio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = afio_init &rArr; debug_assert_handler &rArr; debug_output &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConf
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAHB1Periphs
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[8a]"></a>clock_init</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, zf_common_clock.o(.text.clock_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = clock_init &rArr; clock_set_freq &rArr; func_get_greatest_common_divisor
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_delay_init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupt_init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_set_freq
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[96]"></a>debug_assert_handler</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, zf_common_debug.o(.text.debug_assert_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = debug_assert_handler &rArr; debug_output &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupt_global_disable
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_delay
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_output
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_protective_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afio_init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_str_to_hex
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_str_to_double
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_str_to_int
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_read_buffer
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_write_buffer
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_used
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_clear
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_set_duty
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write_string
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_query_byte
</UL>

<P><STRONG><a name="[a3]"></a>debug_init</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, zf_common_debug.o(.text.debug_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = debug_init &rArr; uart_init &rArr; afio_init &rArr; debug_assert_handler &rArr; debug_output &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_output_init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_output_struct_init
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[a5]"></a>debug_output_init</STRONG> (Thumb, 76 bytes, Stack size 4 bytes, zf_common_debug.o(.text.debug_output_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = debug_output_init
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_init
</UL>

<P><STRONG><a name="[a4]"></a>debug_output_struct_init</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, zf_common_debug.o(.text.debug_output_struct_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = debug_output_struct_init
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_init
</UL>

<P><STRONG><a name="[7a]"></a>dm1xa_light_callback</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, zf_device_dm1xa.o(.text.dm1xa_light_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = dm1xa_light_callback &rArr; timer_clear &rArr; TIM_DoSwTrigger
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[79]"></a>dm1xa_sound_callback</STRONG> (Thumb, 280 bytes, Stack size 16 bytes, zf_device_dm1xa.o(.text.dm1xa_sound_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = dm1xa_sound_callback &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_clear
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_get
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_get_level
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[ac]"></a>fifo_clear</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, zf_common_fifo.o(.text.fifo_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = fifo_clear &rArr; debug_assert_handler &rArr; debug_output &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_assert_handler
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_uart_callback
</UL>

<P><STRONG><a name="[ad]"></a>fifo_init</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, zf_common_fifo.o(.text.fifo_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = fifo_init &rArr; debug_assert_handler &rArr; debug_output &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_init
</UL>

<P><STRONG><a name="[ae]"></a>fifo_read_buffer</STRONG> (Thumb, 494 bytes, Stack size 48 bytes, zf_common_fifo.o(.text.fifo_read_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = fifo_read_buffer &rArr; fifo_used &rArr; debug_assert_handler &rArr; debug_output &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_used
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_end_offset
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_assert_handler
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_uart_callback
</UL>

<P><STRONG><a name="[af]"></a>fifo_used</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, zf_common_fifo.o(.text.fifo_used))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = fifo_used &rArr; debug_assert_handler &rArr; debug_output &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_read_buffer
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_uart_callback
</UL>

<P><STRONG><a name="[b2]"></a>fifo_write_buffer</STRONG> (Thumb, 506 bytes, Stack size 40 bytes, zf_common_fifo.o(.text.fifo_write_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = fifo_write_buffer &rArr; debug_assert_handler &rArr; debug_output &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_head_offset
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_assert_handler
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_uart_callback
</UL>

<P><STRONG><a name="[50]"></a>fputc</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, zf_common_debug.o(.text.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = fputc &rArr; uart_write_byte &rArr; UART_PutData
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write_byte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[9e]"></a>func_get_greatest_common_divisor</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, zf_common_function.o(.text.func_get_greatest_common_divisor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = func_get_greatest_common_divisor
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_set_freq
</UL>

<P><STRONG><a name="[b4]"></a>func_str_to_double</STRONG> (Thumb, 560 bytes, Stack size 104 bytes, zf_common_function.o(.text.func_str_to_double))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = func_str_to_double &rArr; debug_assert_handler &rArr; debug_output &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_assert_handler
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmplt
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_float_number
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_double_number
</UL>

<P><STRONG><a name="[b6]"></a>func_str_to_hex</STRONG> (Thumb, 270 bytes, Stack size 24 bytes, zf_common_function.o(.text.func_str_to_hex))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = func_str_to_hex &rArr; debug_assert_handler &rArr; debug_output &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_assert_handler
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_data_parse
</UL>

<P><STRONG><a name="[b7]"></a>func_str_to_int</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, zf_common_function.o(.text.func_str_to_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = func_str_to_int &rArr; debug_assert_handler &rArr; debug_output &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_int_number
</UL>

<P><STRONG><a name="[a9]"></a>gpio_get_level</STRONG> (Thumb, 46 bytes, Stack size 4 bytes, zf_driver_gpio.o(.text.gpio_get_level))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = gpio_get_level
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm1xa_sound_callback
</UL>

<P><STRONG><a name="[80]"></a>gpio_init</STRONG> (Thumb, 392 bytes, Stack size 40 bytes, zf_driver_gpio.o(.text.gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + In Cycle
<LI>Call Chain = gpio_init &rArr;  debug_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConf
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAHB1Periphs
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_assert_handler
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_level
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_protective_handler
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_I2C_Init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inigpio
</UL>

<P><STRONG><a name="[6c]"></a>gpio_set_level</STRONG> (Thumb, 94 bytes, Stack size 4 bytes, zf_driver_gpio.o(.text.gpio_set_level))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = gpio_set_level
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_I2C_SendByte
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_I2C_Stop
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_I2C_Start
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_Short
</UL>

<P><STRONG><a name="[be]"></a>gps_data_parse</STRONG> (Thumb, 438 bytes, Stack size 56 bytes, zf_device_gps_tau1201.o(.text.gps_data_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144<LI>Call Chain = gps_data_parse &rArr; gps_gnrmc_parse &rArr; get_double_number &rArr; func_str_to_double &rArr; debug_assert_handler &rArr; debug_output &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_str_to_hex
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_gngga_parse
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_gnrmc_parse
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c2]"></a>gps_init</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, zf_device_gps_tau1201.o(.text.gps_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = gps_init &rArr; uart_init &rArr; afio_init &rArr; debug_assert_handler &rArr; debug_output &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_interrupt
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[92]"></a>gps_uart_callback</STRONG> (Thumb, 314 bytes, Stack size 40 bytes, zf_device_gps_tau1201.o(.text.gps_uart_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = gps_uart_callback &rArr; fifo_read_buffer &rArr; fifo_used &rArr; debug_assert_handler &rArr; debug_output &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_read_buffer
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_write_buffer
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_used
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_clear
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_query_byte
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[c6]"></a>inigpio</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, motor.o(.text.inigpio))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = inigpio &rArr; pwm_init &rArr; afio_init &rArr; debug_assert_handler &rArr; debug_output &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_set_duty
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[c8]"></a>interrupt_disable</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, zf_common_interrupt.o(.text.interrupt_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = interrupt_disable &rArr; __NVIC_DisableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_interrupt
</UL>

<P><STRONG><a name="[ca]"></a>interrupt_enable</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, zf_common_interrupt.o(.text.interrupt_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = interrupt_enable &rArr; __NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_interrupt
</UL>

<P><STRONG><a name="[9f]"></a>interrupt_global_disable</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, zf_common_interrupt.o(.text.interrupt_global_disable))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_assert_handler
</UL>

<P><STRONG><a name="[9c]"></a>interrupt_init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, zf_common_interrupt.o(.text.interrupt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = interrupt_init &rArr; __NVIC_SetPriorityGrouping
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_init
</UL>

<P><STRONG><a name="[4e]"></a>main</STRONG> (Thumb, 130 bytes, Stack size 104 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1448<LI>Call Chain = main &rArr; mode_gps &rArr; Esp_PUB &rArr; ESP01S_SendCmd &rArr; uart_write_string &rArr; debug_assert_handler &rArr; debug_output &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_data_parse
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_gps
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_delay_ms
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[ce]"></a>mode_gps</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, main.o(.text.mode_gps))
<BR><BR>[Stack]<UL><LI>Max Depth = 1344<LI>Call Chain = mode_gps &rArr; Esp_PUB &rArr; ESP01S_SendCmd &rArr; uart_write_string &rArr; debug_assert_handler &rArr; debug_output &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Esp_PUB
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[87]"></a>pwm_init</STRONG> (Thumb, 672 bytes, Stack size 112 bytes, zf_driver_pwm.o(.text.pwm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = pwm_init &rArr; afio_init &rArr; debug_assert_handler &rArr; debug_output &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_EnableCompOutput
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_EnableOutputCompareSwitch
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_EnableOutputCompare
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Start
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afio_init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_clock_enable
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_funciton_check
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_assert_handler
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_set_duty
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inigpio
</UL>

<P><STRONG><a name="[c7]"></a>pwm_set_duty</STRONG> (Thumb, 348 bytes, Stack size 32 bytes, zf_driver_pwm.o(.text.pwm_set_duty))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = pwm_set_duty &rArr; debug_assert_handler &rArr; debug_output &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PutChannelValue
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inigpio
</UL>

<P><STRONG><a name="[9d]"></a>system_delay_init</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, zf_driver_delay.o(.text.system_delay_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = system_delay_init &rArr; LPTIM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIM_Init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ResetAPB2Periphs
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB2Periphs
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_init
</UL>

<P><STRONG><a name="[6d]"></a>system_delay_ms</STRONG> (Thumb, 130 bytes, Stack size 4 bytes, zf_driver_delay.o(.text.system_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = system_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Esp_PUB
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP01S_Init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_init
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_Short
</UL>

<P><STRONG><a name="[cd]"></a>system_init</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, main.o(.text.system_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1320<LI>Call Chain = system_init &rArr; ESP01S_Init &rArr; uart_init &rArr; afio_init &rArr; debug_assert_handler &rArr; debug_output &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP01S_Clear
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP01S_Init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inigpio
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_init
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a8]"></a>timer_clear</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, zf_driver_timer.o(.text.timer_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = timer_clear &rArr; TIM_DoSwTrigger
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DoSwTrigger
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm1xa_light_callback
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm1xa_sound_callback
</UL>

<P><STRONG><a name="[d0]"></a>timer_clock_enable</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, zf_driver_timer.o(.text.timer_clock_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = timer_clock_enable &rArr; RCC_EnableAPB1Periphs
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB1Periphs
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB2Periphs
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
</UL>

<P><STRONG><a name="[cf]"></a>timer_funciton_check</STRONG> (Thumb, 104 bytes, Stack size 4 bytes, zf_driver_timer.o(.text.timer_funciton_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = timer_funciton_check
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
</UL>

<P><STRONG><a name="[aa]"></a>timer_get</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, zf_driver_timer.o(.text.timer_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = timer_get &rArr; TIM_GetCounterValue
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCounterValue
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm1xa_sound_callback
</UL>

<P><STRONG><a name="[93]"></a>uart_esp32_read</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, uart_esp32.o(.text.uart_esp32_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = uart_esp32_read &rArr; uart_read_byte &rArr; UART_GetData
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_read_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART6_IRQHandler
</UL>

<P><STRONG><a name="[72]"></a>uart_init</STRONG> (Thumb, 246 bytes, Stack size 48 bytes, zf_driver_uart.o(.text.uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = uart_init &rArr; afio_init &rArr; debug_assert_handler &rArr; debug_output &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afio_init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB1Periphs
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB2Periphs
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Enable
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP01S_Init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[c4]"></a>uart_query_byte</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, zf_driver_uart.o(.text.uart_query_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = uart_query_byte &rArr; debug_assert_handler &rArr; debug_output &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_assert_handler
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetData
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_uart_callback
</UL>

<P><STRONG><a name="[89]"></a>uart_read_byte</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, zf_driver_uart.o(.text.uart_read_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = uart_read_byte &rArr; UART_GetData
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetData
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_esp32_read
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv
</UL>

<P><STRONG><a name="[c3]"></a>uart_rx_interrupt</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, zf_driver_uart.o(.text.uart_rx_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = uart_rx_interrupt &rArr; interrupt_disable &rArr; __NVIC_DisableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupt_disable
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupt_enable
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EnableInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_init
</UL>

<P><STRONG><a name="[94]"></a>uart_write_byte</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, zf_driver_uart.o(.text.uart_write_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uart_write_byte &rArr; UART_PutData
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetStatus
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PutData
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write_string
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART6_IRQHandler
</UL>

<P><STRONG><a name="[76]"></a>uart_write_string</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, zf_driver_uart.o(.text.uart_write_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = uart_write_string &rArr; debug_assert_handler &rArr; debug_output &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_assert_handler
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_uart_str_output
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP01S_SendCmd
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART6_IRQHandler
</UL>

<P><STRONG><a name="[e1]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[fc]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[fd]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[fe]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[73]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = printf
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP01S_SendCmd
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Esp_PUB
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP01S_Init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[e3]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[ff]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[100]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[101]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[75]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_output
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Esp_PUB
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP01S_Init
</UL>

<P><STRONG><a name="[102]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[103]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[104]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[9a]"></a>clock_reset</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, zf_common_clock.o(.text.clock_reset))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_init
</UL>

<P><STRONG><a name="[9b]"></a>clock_set_freq</STRONG> (Thumb, 1384 bytes, Stack size 88 bytes, zf_common_clock.o(.text.clock_set_freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = clock_set_freq &rArr; func_get_greatest_common_divisor
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_get_greatest_common_divisor
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_init
</UL>

<P><STRONG><a name="[a0]"></a>debug_protective_handler</STRONG> (Thumb, 250 bytes, Stack size 336 bytes, zf_common_debug.o(.text.debug_protective_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = debug_protective_handler &rArr; gpio_init &rArr;  debug_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_assert_handler
</UL>

<P><STRONG><a name="[a1]"></a>debug_output</STRONG> (Thumb, 944 bytes, Stack size 640 bytes, zf_common_debug.o(.text.debug_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = debug_output &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_assert_handler
</UL>

<P><STRONG><a name="[a2]"></a>debug_delay</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, zf_common_debug.o(.text.debug_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = debug_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_assert_handler
</UL>

<P><STRONG><a name="[4f]"></a>debug_uart_str_output</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, zf_common_debug.o(.text.debug_uart_str_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = debug_uart_str_output &rArr; uart_write_string &rArr; debug_assert_handler &rArr; debug_output &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write_string
</UL>
<BR>[Address Reference Count : 1]<UL><LI> zf_common_debug.o(.text.debug_init)
</UL>
<P><STRONG><a name="[b3]"></a>fifo_head_offset</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, zf_common_fifo.o(.text.fifo_head_offset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fifo_head_offset
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_write_buffer
</UL>

<P><STRONG><a name="[b1]"></a>fifo_end_offset</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, zf_common_fifo.o(.text.fifo_end_offset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fifo_end_offset
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_read_buffer
</UL>

<P><STRONG><a name="[cb]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, zf_common_interrupt.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupt_enable
</UL>

<P><STRONG><a name="[c9]"></a>__NVIC_DisableIRQ</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, zf_common_interrupt.o(.text.__NVIC_DisableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupt_disable
</UL>

<P><STRONG><a name="[cc]"></a>__NVIC_SetPriorityGrouping</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, zf_common_interrupt.o(.text.__NVIC_SetPriorityGrouping))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupt_init
</UL>

<P><STRONG><a name="[bf]"></a>gps_gnrmc_parse</STRONG> (Thumb, 1068 bytes, Stack size 248 bytes, zf_device_gps_tau1201.o(.text.gps_gnrmc_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 1088<LI>Call Chain = gps_gnrmc_parse &rArr; get_double_number &rArr; func_str_to_double &rArr; debug_assert_handler &rArr; debug_output &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utc_to_btc
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_float_number
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_double_number
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_parameter_index
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_data_parse
</UL>

<P><STRONG><a name="[c0]"></a>gps_gngga_parse</STRONG> (Thumb, 156 bytes, Stack size 48 bytes, zf_device_gps_tau1201.o(.text.gps_gngga_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = gps_gngga_parse &rArr; get_float_number &rArr; func_str_to_double &rArr; debug_assert_handler &rArr; debug_output &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_int_number
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_float_number
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_parameter_index
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_data_parse
</UL>

<P><STRONG><a name="[b9]"></a>get_parameter_index</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, zf_device_gps_tau1201.o(.text.get_parameter_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = get_parameter_index
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_int_number
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_float_number
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_double_number
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_gngga_parse
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_gnrmc_parse
</UL>

<P><STRONG><a name="[b8]"></a>get_double_number</STRONG> (Thumb, 80 bytes, Stack size 48 bytes, zf_device_gps_tau1201.o(.text.get_double_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = get_double_number &rArr; func_str_to_double &rArr; debug_assert_handler &rArr; debug_output &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_str_to_double
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_parameter_index
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_gnrmc_parse
</UL>

<P><STRONG><a name="[bb]"></a>get_float_number</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, zf_device_gps_tau1201.o(.text.get_float_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = get_float_number &rArr; func_str_to_double &rArr; debug_assert_handler &rArr; debug_output &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_str_to_double
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_parameter_index
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_gngga_parse
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_gnrmc_parse
</UL>

<P><STRONG><a name="[c1]"></a>utc_to_btc</STRONG> (Thumb, 290 bytes, Stack size 8 bytes, zf_device_gps_tau1201.o(.text.utc_to_btc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = utc_to_btc
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_gnrmc_parse
</UL>

<P><STRONG><a name="[bc]"></a>get_int_number</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, zf_device_gps_tau1201.o(.text.get_int_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = get_int_number &rArr; func_str_to_int &rArr; debug_assert_handler &rArr; debug_output &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_str_to_int
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_parameter_index
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_gngga_parse
</UL>

<P><STRONG><a name="[52]"></a>type_default_callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, zf_device_type.o(.text.type_default_callback))
<BR>[Address Reference Count : 3]<UL><LI> zf_device_type.o(.data.camera_vsync_handler)
<LI> zf_device_type.o(.data.camera_dma_handler)
<LI> zf_device_type.o(.data.wireless_module_uart_handler)
</UL>
<P><STRONG><a name="[8e]"></a>_TIM_WriteChannelCtrlReg</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, hal_tim.o(.text._TIM_WriteChannelCtrlReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _TIM_WriteChannelCtrlReg
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_EnableOutputCompare
</UL>

<P><STRONG><a name="[e4]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[e2]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[e7]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[e6]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[51]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
